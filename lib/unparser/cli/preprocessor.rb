module Unparser
  class CLI

    # CLI Specific preprocessor used for equivalency testing
    class Preprocessor
      include AbstractType, Concord.new(:node), Procto.call(:result)

      # Return preprocessor result
      #
      # @return [Parser::AST::Node]
      #
      # @api private
      #
      abstract_method :result

      # Run preprocessor for node
      #
      # @param
      #
      # @return [Parser::AST::Node]
      #
      # @api private
      #
      def self.run(node)
        REGISTRY.fetch(node.type, Noop).new(node).result
      end

      REGISTRY = {}

      # Register preprocessor
      #
      # @param [Symbol] type
      #
      # @return [undefined]
      #
      # @api private
      #
      def self.register(type)
        REGISTRY[type] = self
      end
      private_class_method :register

    private

      # Visit node
      #
      # @param [Parser::AST::Node]
      #
      # @api private
      #
      def visit(node)
        self.class.run(node)
      end

      # Return children
      #
      # @return [Array<Parser::AST::Node>]
      #
      # @api private
      #
      def children
        node.children
      end

      # Noop preprocessor that just passes through noode.
      class Noop < self

        # Return preprocessor result
        #
        # @return [Parser::AST::Node]
        #
        # @api private
        #
        def result
          mapped_children = children.map do |node|
            if node.kind_of?(Parser::AST::Node)
              visit(node)
            else
              node
            end
          end
          Parser::AST::Node.new(node.type, mapped_children)
        end
      end # Noop

      # Preprocessor for begin nodes. Removes begin nodes with one child.
      #
      # These superflownosely currently get generated by unparser.
      #
      class Begin < self

        register :begin

        # Return preprocessor result
        #
        # @return [Parser::AST::Node]
        #
        # @api private
        #
        def result
          if children.one?
            visit(children.first)
          else
            Noop.call(node)
          end
        end

      end # Begin
    end # Preprocessor
  end # CLI
end # Unparser
